basePath: /
definitions:
  domain.Film:
    properties:
      cast:
        type: string
      createdAt:
        type: string
      director:
        type: string
      genre:
        type: string
      id:
        type: integer
      releaseDate:
        type: string
      synopsis:
        type: string
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/domain.User'
      userID:
        type: integer
    type: object
  domain.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      password:
        type: string
      username:
        type: string
    type: object
  http.CreateFilmRequest:
    properties:
      cast:
        type: string
      director:
        type: string
      genre:
        type: string
      release_date:
        type: string
      synopsis:
        type: string
      title:
        type: string
    required:
    - title
    type: object
  http.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  http.RegisterRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  http.UpdateFilmRequest:
    properties:
      cast:
        type: string
      director:
        type: string
      genre:
        type: string
      release_date:
        type: string
      synopsis:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a REST API for managing favorite films.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Films API
  version: "1.0"
paths:
  /films:
    get:
      consumes:
      - application/json
      description: Retrieves a list of films, optionally filtered by title, genre,
        and release date.
      parameters:
      - description: Film title
        in: query
        name: title
        type: string
      - description: Film genre
        in: query
        name: genre
        type: string
      - description: Film release date (YYYY-MM-DD)
        in: query
        name: release_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Film'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a list of films
      tags:
      - 1.films
    post:
      consumes:
      - application/json
      description: Adds a new film to the database, linked to the authenticated user.
      parameters:
      - description: Film details
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/http.CreateFilmRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Film'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Film already exists
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new film
      tags:
      - 1.films
  /films/{id}:
    delete:
      description: Deletes a film from the database, only allowed for the creator
        user.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid Film ID
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Forbidden: only creator can delete this film'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Film not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a film
      tags:
      - 1.films
    get:
      consumes:
      - application/json
      description: Retrieves the details of a film by ID, including the creator user.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Film'
        "400":
          description: Invalid Film ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Film not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get details of a specific film
      tags:
      - 1.films
    put:
      consumes:
      - application/json
      description: Updates the details of a film, only allowed for the creator user.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: integer
      - description: Film details
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/http.UpdateFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Film'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: 'Forbidden: only creator can update this film'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Film not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Could not update film
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a film
      tags:
      - 1.films
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user with the provided username and password.
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - 0.auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided username and password.
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/http.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Username already exists
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - 0.auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
